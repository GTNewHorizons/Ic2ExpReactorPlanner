import com.diffplug.blowdryer.Blowdryer

import java.nio.file.Files
import java.nio.file.Paths

plugins {
  id 'java'
  id 'application'
  id 'idea'
  id 'eclipse'
  id 'maven-publish'
  id 'com.diffplug.spotless' version '6.7.2' apply false
  id 'com.palantir.git-version' version '0.13.0' apply false // 0.13.0 is the last jvm8 supporting version
}

boolean disableSpotless = false
boolean apiPackage = false
String modrinthProjectId = "Ic2ExpReactorPlanner"

if (project.file('.git/HEAD').isFile()) {
    apply plugin: 'com.palantir.git-version'
}

project.extensions.add(Blowdryer, "Blowdryer", Blowdryer)
if (!disableSpotless) {
    apply plugin: 'com.diffplug.spotless'
    apply from: Blowdryer.file('spotless.gradle')
}

sourceCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'Ic2ExpReactorPlanner.ReactorPlannerFrame'
}

mainClassName = ext.mainClass

sourceSets {
  main {
    java {
      srcDirs 'src'
    }
    resources {
      srcDir 'resources'
    }
  }

  test {
    java {
      srcDir 'test'
    }
    resources {
      srcDir 'testResources'
    }
  }
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // TODO: Add dependencies here ...
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    testCompile group: 'junit', name: 'junit', version: '4.10'
}

jar {
    from('src') {
        include 'assets/**/*.png'
        include 'Ic2ExpReactorPlanner/Bundle*.properties'
    }
    manifest {
        attributes 'Main-Class': 'Ic2ExpReactorPlanner.ReactorPlannerFrame'
    }
}

// Fix Jenkins' Git: chmod a file should not be detected as a change and append a '.dirty' to the version
try {
    'git config core.fileMode false'.execute()
}
catch (Exception ignored) {
    out.style(Style.Failure).println("git isn't installed at all")
}

// Pulls version first from the VERSION env and then git tag
String identifiedVersion
String versionOverride = System.getenv("VERSION") ?: null
try {
    identifiedVersion = versionOverride == null ? gitVersion() : versionOverride
}
catch (Exception ignored) {
    out.style(Style.Failure).text(
        'This mod must be version controlled by Git AND the repository must provide at least one tag,\n' +
            'or the VERSION override must be set! ').style(Style.SuccessHeader).text('(Do NOT download from GitHub using the ZIP option, instead\n' +
        'clone the repository, see ').style(Style.Info).text('https://gtnh.miraheze.org/wiki/Development').style(Style.SuccessHeader).println(' for details.)'
    )
    versionOverride = 'NO-GIT-TAG-SET'
    identifiedVersion = versionOverride
}
version = identifiedVersion
ext {
    modVersion = identifiedVersion
}

if (identifiedVersion == versionOverride) {
    out.style(Style.Failure).text('Override version to ').style(Style.Identifier).text(modVersion).style(Style.Failure).println('!\7')
}

task processAssets(type: Copy) {
    from('src') {
        include 'assets/**/*.png'
        include 'Ic2ExpReactorPlanner/Bundle*.properties'
    }
    into 'build/classes/java/main'
}

run {
    run.dependsOn processAssets
}

task processSource(type: Copy) {
    from sourceSets.main.java
    inputs.property 'erpVersion', erpVersion
    filter { line -> line.replaceAll('@VERSION@', erpVersion) }
    into "$buildDir/src"
}

compileJava {
    source = processSource.outputs
}

publishing {
    publications {
        create("maven", MavenPublication) {
            from components.java

            if (apiPackage) {
                artifact apiJar
            }

            groupId = System.getenv("ARTIFACT_GROUP_ID") ?: "com.github.GTNewHorizons"
            artifactId = System.getenv("ARTIFACT_ID") ?: project.name
            // Using the identified version, not project.version as it has the prepended 1.7.10
            version = System.getenv("RELEASE_VERSION") ?: identifiedVersion
        }
    }

    repositories {
        maven {
            url = "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases"
            allowInsecureProtocol = true
            credentials {
                username = System.getenv("MAVEN_USER") ?: "NONE"
                password = System.getenv("MAVEN_PASSWORD") ?: "NONE"
            }
        }
    }
}